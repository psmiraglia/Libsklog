libsklog - Make secure logging using Schneier and Kelsey scheme
===============================================================

	Copyright (C) 2007-2010 Politecnico di Torino, Italy
	TORSEC group -- http://security.polito.it

    Author: Paolo Smiraglia <paolo.smiraglia@polito.it>



1 Introduction
==============

Libsklog is a C library which allows users to create logentries
according to the scheme defined by B. Schneier and J. Kelsey in
"Secure Audit Logs to Support Computer Forensics". This document will
illustrate you about how to install the library under Linux systems,
how to configure the environment and finally how to use it.

To get more information, to notify a bug or more in general to contact
me, please send an email to <paolo.smiraglia@polito.it>



2. Installation
===============

In this section is shown the procedure to install the library and to
configure the environment. All steps are described assuming that the
library installation prefix ($PREFIX) is

   /usr/local


2.1 Get Sources and Install Library
===================================

Before proceeding with the installation, several dependencies need to 
be resolved:

    Libtool
    Autoconf
    OpenSSL >= 0.9.8
    SQLite 3.x
    libuuid
    libconf
    libjansson

Get the sources from GitHub repository

	$ mkdir ~/temp
	$ cd ~/temp
	$ git clone https://github.com/psmiraglia/Libsklog.git libsklog
	
Generate ./configure script (usually only the first time)

	$ cd libsklog
	$ autoreconf --install --force --verbose
	
Run ./configure script using the option --enable-debug (strongly
recommended). Other options are available, to see them run

	$ ./configure --help
	
Build and install the library

	$ ./configure --enable-debug
	$ make
	$ make install (as root)
	
If you are Debian addicted, you can use "checkinstall" instead
of "make install". In this way a .deb package will be created and
installed.

	$ ./configure --enable-debug
	$ make
	$ checkinstall (as root)
	
	
2.2 Setup environment
=====================

According to the Schneier and Kelsey entities (U, T and V), the library
provides three different set of APIs. Each API set requires a
configuration that can be executed by editing a file. Files are
provided including comments about the parameters that can be set.

	$PREFIX/etc/libsklog/libsklog-u.conf
	$PREFIX/etc/libsklog/libsklog-t.conf
	$PREFIX/etc/libsklog/libsklog-v.conf
	
3 Usage
=======

The installation of Libsklog provides also three sample application for
each set of API.

	$PREFIX/bin/unode (for U API)
	$PREFIX/bin/tnode (for T API)
	$PREFIX/bin/vnode (for V API)
	
During the execution of the tnode binary, you will have to provide a
certificate passphrase (123456).

For the documentation about the usage of the APIs, see comments placed
in the source code.




3.1 U component
===============

    /*
    ** This is a really simple application
    ** which acts as U component
    */
    
    #include <stdio.h>
    #include <string.h>
    #include <libsklog/sklog_u.h>
    
    #define BUFLEN 1024
    
    int main (void) {
    
        SKLOG_U_Ctx *ctx = 0;
        SKLOG_DATA_TYPE e_type = 0;
        char event[BUFLEN] = { 0 };
    
        ...
    
        ctx = SKLOG_U_NewCtx();
    
        if ( ctx == NULL ) {
            fprintf(stderr,"SKLOG_U_NewCtx() failure");
            exit(1);
        }
    
        /* something happens */
        SKLOG_U_LogEvent(ctx,e_type,event,strlen(event));
    
        ...
    
        /* something happens */
        SKLOG_U_LogEvent(ctx,e_type,event,strlen(event));
    
        ...
    
        /* something happens */
        SKLOG_U_LogEvent(ctx,e_type,event,strlen(event));
    
        ...
    
        SKLOG_U_FreeCtx(&ctx);
    
        return 0;
    } 

To build application run:
    
    $ gcc -I/usr/local/include -L/usr/local/lib u_app.c -o u_app -lsklog


3.2 T component
===============

    /*
    ** This is a really simple application
    ** which acts as T component
    */
    
    #include <stdio.h>
    #include <libsklog/sklog_t.h>
    
    #define BUFLEN 1024
    
    int main (void) {
    
        SKLOG_T_Ctx *ctx = 0;
    
        ...
    
        ctx = SKLOG_T_NewCtx();
    
        if ( ctx == NULL ) {
            fprintf(stderr,"SKLOG_T_NewCtx() failure");
            exit(1);
        }
    
        if ( SKLOG_T_InitCtx(ctx) == SKLOG_FAILURE ) {
            fprintf(stderr,"SKLOG_T_InitCtx() failure");
            exit(1);
        }
    
        ...
        
        SKLOG_T_Run(ctx);
    
        ...
    
        SKLOG_T_FreeCtx(&ctx);
    
        return 0;
    } 

To build application run:

    $ gcc -I/usr/local/include -L/usr/local/lib t_app.c -o t_app -lsklog


















	







2.2.1 Configuration File
========================

To configure a U component it's necessary to create a file
called "libsklog-u.conf" in "/usr/local/etc/libsklog"
which will contains all required settings. If the configuration
file is not prersent, default values will be used. Below 
all settable parameters:

    t_cert          Specifies the path where the certificate of T is
                    installed. T acts also as certification authority.

    t_address       Specifies the IP address of T.

    t_port          Specifies the port on where T is listening.

    u_cert          Specifies the path where the certificate of U,
                    issued by T, is installed.

    u_id            Specifies the identifier (common name) of U.

    u_privkey       Specifies the path where the private key of U is
                    installed.

    u_timeout       Sets the timeout for the logfile initialization
                    procedure.

    logfile_size    Sets the number of log entries which can be
                    collected into the logfile.

The file libsklog-u.conf.example is a template of a
configuration file for U component. You can use it as staring point
for the definition of a new file:

    $ cd /usr/local/etc/libsklog
    $ cp libsklog-u.conf.example libsklog-u.conf
    $ vim libsklog-u.conf
      (edit your file)

2.2.2 Database Initialization
=============================

    $ cd /usr/local/var/libsklog/db
    $ sqlite3 u.db < /usr/local/etc/libsklog/sql/u_database.sql


2.3 Setup T Component
=====================

2.3.1 Configuration File
========================

To configure a T component it's necessary to create a file
called "libsklog-t.conf" in "/usr/local/etc/libsklog"
which will contains all required settings. If the configuration
file is not present, default values will be used. Below all settable
parameters:

    t_cert       Specifies the path where the certificate of T is
                 installed. T acts also as certification authority.

    t_privkey    Specifies the path where the private key of T is
                 installed.

    t_id         Specifies the identifier (common name) of T.

    t_address    Specifies the IP address of T.

    t_port       Specifies the port on where T is listening.
    
The file "libsklog-t.conf.example" is a template of a
configuration file for T component. You can use it as staring point
for the definition of a new file:

    $ cd /usr/local/etc/libsklog
    $ cp libsklog-t.conf.example libsklog-t.conf
    $ vim libsklog-t.conf
      (edit your file)

2.3.2 Database Initialization
=============================

    $ cd /usr/local/var/libsklog/db
    $ sqlite3 t.db < /usr/local/etc/libsklog/sql/t_database.sql


2.4 Setup V Component
=====================

Not yet implemented. Do you want to help me? :-)


